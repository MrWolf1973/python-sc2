from datetime import datetime
import sc2
from sc2.constants import *


class bosalt(object):
    def __init__(self):
        dummy = -1
        self.build_order = {}
        self.CHARACTERS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
        self.structure = ARMORY, BARRACKS, BUNKER, COMMANDCENTER, ENGINEERINGBAY, FACTORY, FUSIONCORE, GHOSTACADEMY, MISSILETURRET, BARRACKSREACTOR, \
            FACTORYREACTOR, STARPORTREACTOR, REFINERY, SENSORTOWER, STARPORT, SUPPLYDEPOT, BARRACKSTECHLAB, FACTORYTECHLAB, \
            STARPORTTECHLAB, \
            ASSIMILATOR, CYBERNETICSCORE, DARKSHRINE, FLEETBEACON, FORGE, GATEWAY, NEXUS, PHOTONCANNON, PYLON, \
            ROBOTICSBAY, ROBOTICSFACILITY, STARGATE, TEMPLARARCHIVE, TWILIGHTCOUNCIL, \
            BANELINGNEST, EVOLUTIONCHAMBER, EXTRACTOR, HATCHERY, HYDRALISKDEN, INFESTATIONPIT, NYDUSNETWORK, ROACHWARREN, \
            SPAWNINGPOOL, SPINECRAWLER, SPIRE, SPORECRAWLER, ULTRALISKCAVERN, CREEPTUMOR
        self.unit = BANSHEE, BATTLECRUISER, GHOST, HELLION, MARAUDER, MARINE, MEDIVAC, RAVEN, REAPER, SCV, SIEGETANK, THOR, dummy, VIKINGASSAULT, CARRIER, COLOSSUS, \
            DARKTEMPLAR, HIGHTEMPLAR, IMMORTAL, MOTHERSHIP, OBSERVER, PHOENIX, PROBE, SENTRY, STALKER, VOIDRAY, ZEALOT, CORRUPTOR, DRONE, \
            HYDRALISK, MUTALISK, OVERLORD, QUEEN, ROACH, ULTRALISK, ZERGLING, INFESTOR, WARPPRISM, HELLION, WARHOUND, WIDOWMINE, \
            MOTHERSHIPCORE, ORACLE, TEMPEST, SWARMHOSTMP, VIPER, CYCLONE, LIBERATOR, DISRUPTOR, ADEPT
        self.morph = ORBITALCOMMAND, PLANETARYFORTRESS, WARPGATE, LAIR, HIVE, GREATERSPIRE, BROODLORD, BANELING, OVERSEER, RAVAGER, LURKER, dummy, LURKERDEN, ARCHON
        self.upgrade = TERRANBUILDINGARMOR, TERRANINFANTRYARMORSVANADIUMPLATINGLEVEL1, TERRANINFANTRYWEAPONSLEVEL1, TERRANSHIPARMORSVANADIUMPLATINGLEVEL1, \
            TERRANSHIPWEAPONSLEVEL1, TERRANVEHICLEARMORSVANADIUMPLATINGLEVEL1, TERRANVEHICLEWEAPONSLEVEL1, STRIKECANNONS, \
            BANSHEECLOAK, PERSONALCLOAKING, HELLIONCAMPAIGNINFERNALPREIGNITER, STIMPACK, \
            HUNTERSEEKER, SIEGETECH, NEOSTEELFRAME, MARAUDERLIFEBOOST, \
            COMBATSHIELD, REAPERSPEED, PROTOSSGROUNDARMORSLEVEL1, PROTOSSGROUNDWEAPONSLEVEL1, \
            PROTOSSAIRARMORSLEVEL1, PROTOSSAIRWEAPONSLEVEL1, PROTOSSSHIELDSLEVEL1, dummy, \
            PSISTORMTECH, BLINKTECH, WARPGATERESEARCH, CHARGE, \
            ZERGGROUNDARMORSLEVEL1, ZERGMELEEWEAPONSLEVEL1, ZERGFLYERARMORSLEVEL1, ZERGFLYERWEAPONSLEVEL1, \
            ZERGMISSILEWEAPONSLEVEL1, EVOLVEGROOVEDSPINES, ORGANICCARAPACE, OVERLORDTRANSPORT, \
            GLIALRECONSTITUTION, dummy, TUNNELINGCLAWS, dummy, CHITINOUSPLATING, \
            ZERGLINGATTACKSPEED, ZERGLINGMOVEMENTSPEED, dummy, BURROW, \
            CENTRIFICALHOOKS, GHOSTMOEBIUSREACTOR, EXTENDEDTHERMALLANCE, dummy, \
            NEURALPARASITE, INFESTORENERGYUPGRADE, BATTLECRUISERBEHEMOTHREACTOR, YAMATOCANNON, \
            HISECAUTOTRACKING, MEDIVACCADUCEUSREACTOR, RAVENCORVIDREACTOR, DURABLEMATERIALS, \
            TRANSFORMATIONSERVOS, GRAVITICTHRUSTERS, OBSERVERGRAVITICBOOSTER, GRAVITICDRIVE, \
            dummy, dummy, dummy, dummy, \
            EVOLVEMUSCULARAUGMENTS, DRILLCLAWS, ANIONPULSECRYSTALS, FLYINGLOCUSTS, \
            EVOLVEGROOVEDSPINES, dummy, CYCLONELOCKONRANGEUPGRADE, LIBERATORAGRANGEUPGRADE, \
            ADEPTPIERCINGATTACK

    async def set_bo_salt(self, salt):
        bo = salt[salt.find("~")+1:]

        for step in (bo[i:5+i] for i in range(0,len(bo)-1, 5)):
            if len(step) == 5:
                supply = self.CHARACTERS.find(step[0]) + 4
                ingametime = datetime.strptime(str(self.CHARACTERS.find(step[1])) + ':' + str(self.CHARACTERS.find(step[2])), '%M:%S')
                typ = self.CHARACTERS.find(step[3])
                code = self.CHARACTERS.find(step[4])
                bo_task = self.transcode(typ, code)


    async def transcode(self, typ, code):
        if typ == 0:  # Structure
            bo_id = self.structure[int(code)]
        elif typ == 1:  # Unit
            bo_id = self.unit[int(code)]
        elif typ == 2:  # Morph
            bo_id = self.morph[int(code)]
        elif typ == 3:  # Upgrade
            bo_id = self.upgrade[int(code)]
